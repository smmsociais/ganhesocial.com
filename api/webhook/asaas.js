// /api/webhook/asaas.js
import connectDB from "../db.js";
import { User } from "../schema.js";

export default async function handler(req, res) {
  try {
    const event = req.body; // O Asaas envia JSON

    if (!event || !event.event) {
      return res.status(400).json({ error: "Evento invÃ¡lido" }); // âœ… return
    }

    // ðŸ”¹ Caso 1: ValidaÃ§Ã£o de saque (Asaas pergunta se deve autorizar)
    if (event.event === "WITHDRAW_REQUESTED") {
      // Aqui vocÃª pode aplicar regras prÃ³prias, por exemplo:
      // - Checar valor mÃ¡ximo
      // - Checar se o usuÃ¡rio existe
      // - Validar limites de seguranÃ§a
      //
      // Exemplo simples: autorizar sempre
      return res.status(200).json({ authorized: true }); // âœ… return
    }

    await connectDB();

    // ðŸ”¹ Caso 2: TransferÃªncia concluÃ­da ou falhou (notificaÃ§Ã£o normal)
    if (event.event === "TRANSFER_CONFIRMED" || event.event === "TRANSFER_FAILED") {
      const transferId = event.transfer.id;

      // Encontra o usuÃ¡rio pelo saque
      const user = await User.findOne({ "saques.asaasTransferId": transferId });
      if (!user) {
        return res.status(404).json({ error: "UsuÃ¡rio nÃ£o encontrado" }); // âœ… return
      }

      // Atualiza o status do saque
      const saque = user.saques.find(s => s.asaasTransferId === transferId);
      if (saque) {
        saque.status = event.event === "TRANSFER_CONFIRMED" ? "pago" : "falhou";
        await user.save();
      }

      return res.status(200).json({ success: true }); // âœ… return
    }

    // ðŸ”¹ Se o evento nÃ£o for nenhum dos tratados
    return res.status(200).json({ success: true, ignored: true }); // âœ… return
  } catch (err) {
    console.error("Erro webhook Asaas:", err);
    return res.status(500).json({ error: "Erro ao processar webhook" }); // âœ… return
  }
}
